TypeScript Tutorial -https://www.w3schools.com/typescript/index.php

TypeScript is JavaScript with added syntax for types.

> > TypeScript Introduction

What is TypeScript? -------------------------------------------------------------------------------------- v --

TypeScript is a syntactic superset of JavaScript which adds static typing.
This basically means that TypeScript adds syntax on top of JavaScript, allowing developers to add types.

** TypeScript being a "Syntactic Superset" means that it shares the same base syntax as JavaScript, but adds something to it. **

Why should I use TypeScript? ----------------------------------------------------------------------------- v --

JavaScript is a loosely typed language. It can be difficult to understand what types of data are being passed around in JavaScript.
In JavaScript, function parameters and variables don't have any information! So developers need to look at documentation, or guess based on the implementation.
TypeScript allows specifying the types of data being passed around within the code, and has the ability to report errors when the types don't match.
For example, TypeScript will report an error when passing a string into a function that expects a number. JavaScript will not.

** TypeScript uses compile time type checking. Which means it checks if the specified types match before running the code, not while running the code. **

How do I use TypeScript? --------------------------------------------------------------------------------- v --

A common way to use TypeScript is to use the official TypeScript compiler, which transpiles TypeScript code into JavaScript.
The next section shows how to get the compiler setup for a local project.

Some popular code editors, such as Visual Studio Code, have built-in TypeScript support and can show errors as you write code!

TypeScript Exercises
TypeScript allows developers to add "types" to JavaScript.
JavaScript is a "losely" typed language.

> > TypeScript Getting Started

TypeScript Compiler -------------------------------------------------------------------------------------- v --

TypeScript is transpiled into JavaScript using a compiler.

** TypeScript being converted into JavaScript means it runs anywhere that JavaScript runs! **

Installing the Compiler ---------------------------------------------------------------------------------- v --

TypeScript has an official compiler which can be installed through npm.
Learn more about npm, and how to get started here: What is npm? "https://www.w3schools.com/whatis/whatis_npm.asp"

Within your npm project, run the following command to install the compiler:

npm install typescript --save-dev

Which should give you an output similar to:
added 1 package, and audited 2 packages in 2s
found 0 vulnerabilities

The compiler is installed in the node_modules directory and can be run with: npx tsc.
npx tsc

Which should give you an output similar to:
Version 4.5.5
tsc: The TypeScript Compiler - Version 4.5.5
Followed by a list of all the Common Commands.

Configuring the compiler ---------------------------------------------------------------------------------- v --

By default the TypeScript compiler will print a help message when run in an empty project.
The compiler can be configured using a tsconfig.json file.

You can have TypeScript create tsconfig.json with the recommended settings with:
npx tsc --init

Which should give you an output similar to:
Created a new tsconfig.json with:
TS
target: es2016
module: commonjs
strict: true
esModuleInterop: true
skipLibCheck: true
forceConsistentCasingInFileNames: true
You can learn more at https://aka.ms/tsconfig.json

Here is an example of more things you could add to the tsconfig.json file:
{
"include": ["src"],
"compilerOptions": {
"outDir": "./build"
}
}
You can open the file in an editor to add those options. This will configure the TypeScript compiler to transpile TypeScript files located in the src/ directory of your project, into JavaScript files in the build/ directory.

** This is one way to quickly get started with TypeScript. There are many other options available such as a create-react-app template, a node starter project, and a webpack plugin. **

Exercise:
The TypeScript compiler can be configured which file?
tsconfig.json

> > TypeScript Simple Types

TypeScript supports some simple types (primitives) you may know.

There are three main primitives in JavaScript and TypeScript.

boolean - true or false values
number - whole numbers and floating point values
string - text values like "TypeScript Rocks"
There are also 2 less common primitives used in later versions of Javascript and TypeScript.

bigint - whole numbers and floating point values, but allows larger negative and positive numbers than the number type.
symbol are used to create a globally unique identifier.

Type Assignment -------------------------------------------------------------------------------------------- v --

When creating a variable, there are two main ways TypeScript assigns a type:

> > > Explicit
> > > Implicit

Explicit Type -------- (_v_)
Explicit - writing out the type:

let firstName: string = "Dylan";
console.log(typeof firstName); // string

Explicit type assignment are easier to read and more intentional.

Implicit Type -------- (_v_)
Implicit - TypeScript will "guess" the type, based on the assigned value:

let firstName = "Dylan";
console.log(typeof firstName); // string

Note: Having TypeScript "guess" the type of a value is called infer.
Implicit assignment forces TypeScript to infer the value.
Implicit type assignment are shorter, faster to type, and often used when developing and testing.

Error In Type Assignment ------------------------------------------------------------------------------------ v --

TypeScript will throw an error if data types do not match.

Example
let firstName: string = "Dylan"; // type string
firstName = 33; // attempts to re-assign the value to a different type
console.log(firstName); // prog.ts(2,1): error TS2322: Type 'number' is not assignable to type 'string'.

Implicit type assignment would have made firstName less noticeable as a string, but both will throw an error:

Example
let firstName = "Dylan"; // inferred to type string
firstName = 33; // attempts to re-assign the value to a different type
console.log(firstName); // prog.ts(2,1): error TS2322: Type 'number' is not assignable to type 'string'.

JavaScript will not throw an error for mismatched types.

Unable to Infer ------------------------------------------------------------------------------------------- v --

TypeScript may not always properly infer what the type of a variable may be. In such cases, it will set the type to any which disables type checking.

Example
// Implicit any as JSON.parse doesn't know what type of data it returns so it can be "any" thing...
const json = JSON.parse("55");

// Most expect json to be an object, but it can be a string or a number like this example
console.log(typeof json); // number

This behavior can be disabled by enabling noImplicitAny as an option in a TypeScript's project tsconfig.json.
That is a JSON config file for customizing how some of TypeScript behaves.

Note: you may see primitive types capitalized like Boolean.
boolean !== Boolean
For this tutorial just know to use the lower-cased values, the upper-case ones are for very specific circumstances.

Exercise: ----------------(\v/)--
There are two main ways TypeScript assigns a type:
implicit
explicit

Create a "firstName" variable, string type using Implicit type:
let firstName = "Dylan"

Create a "firstName" variable, string type using Explicit type:
let firstName: string = "Dylan"

> > TypeScript Special Types

TypeScript has special types that may not refer to any specific type of data.

Type: any ------------------------------------------------------------------------------------------------ v --

any is a type that disables type checking and effectively allows all types to be used.

The example below does not use any and will throw an error:

Example without any -------- (_v_)
let u = true;
u = "string"; // Error: Type 'string' is not assignable to type 'boolean'.
Math.round(u); // Error: Argument of type 'boolean' is not assignable to parameter of type 'number'.

Setting any to the special type any disables type checking:

Example with any ----------- (_v_)
let v: any = true;
v = "string"; // no error as it can be "any" type
Math.round(v); // no error as it can be "any" type

Extra Examples +++

let u = true;
u = "string"; // Error: Type 'string' is not assignable to type 'boolean'.
u.runANonExistentMethod(); // Error: Property 'runANonExistentMethod' does not exist on type 'boolean'.
console.log(Math.round(u)); // Error: Argument of type 'boolean' is not assignable to parameter of type 'number'.
// Console :-
prog.ts(2,7): error TS2322: Type 'string' is not assignable to type 'boolean'.
prog.ts(3,9): error TS2339: Property 'runANonExistentMethod' does not exist on type 'boolean'.
prog.ts(4,18): error TS2345: Argument of type 'boolean' is not assignable to parameter of type 'number'.

let v: any = true;
v = "string"; // no error as it can be "any" type
console.log(Math.round(v)); // no error as it can be "any" type
// Console :-
NaN

**----- any can be a useful way to get past errors since it disables type checking, but TypeScript will not be able provide type safety, and tools which rely on type data, such as auto completion, will not work. Remember, it should be avoided at "any" cost... -----**

Type: unknown --------------------------------------------------------------------------------------------- v --

unknown is a similar, but safer alternative to any.

TypeScript will prevent unknown types from being used, as shown in the below example:

let w: unknown = 1;
w = "string"; // no error

w = {
runANonExistentMethod: () => {
console.log("I think therefore I am");
}
} as { runANonExistentMethod: () => void }

// How can we avoid the error for the code commented out below when we don't know the type?
// w.runANonExistentMethod(); // Error: Object is of type 'unknown'.

if(typeof w === 'object' && w !== null) {
(w as { runANonExistentMethod: Function }).runANonExistentMethod();
}
// Although we have to cast multiple times we can do a check in the if to secure our type and have a safer casting

// Console :-
I think therefore I am

Compare the example above to the previous example, with any.

**----- unknown is best used when you don't know the type of data being typed. To add a type later, you'll need to cast it. Casting is when we use the "as" keyword to say property or variable is of the casted type. -----**

Type: never ----------------------------------------------------------------------------------------------- v --

never effectively throws an error whenever it is defined.

let x: never = true; // Error: Type 'boolean' is not assignable to type 'never'.
Console :-
prog.ts(1,5): error TS2322: Type 'boolean' is not assignable to type 'never'.

**----- never is rarely used, especially by itself, its primary use is in advanced generics. -----**

Type: undefined & null ------------------------------------------------------------------------------------ v --

undefined and null are types that refer to the JavaScript primitives undefined and null respectively.

let y: undefined = undefined;
console.log(typeof y);

let z: null = null;
console.log(typeof z);

// Console :-
undefined
object

**----- These types don't have much use unless strictNullChecks is enabled in the tsconfig.json file. -----**

Exercise: ----------------(\v/)--
Create an empty "myVar" variable, and disable type checking:
let myVar: any;

Create an empty "myVar" variable, and specify it should be an unknown type:
let myVar: unknown;

> > TypeScript Arrays

TypeScript has a specific syntax for typing arrays.

Read more about arrays in our JavaScript Array chapter. >> https://www.w3schools.com/js/js_arrays.asp

const names: string[] = [];
names.push("Dylan"); // no error
names.push(3); // Error: Argument of type 'number' is not assignable to parameter of type 'string'.
console.log(names);

Console :-
prog.ts(3,15): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.
